version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: legalllm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-legalllm}
      POSTGRES_USER: ${DB_USER:-legalllm_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-deployment/postgres/init:/docker-entrypoint-initdb.d
      - ./docker-deployment/postgres/backups:/backups
    ports:
      - "5432:5432"
    networks:
      - legalllm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-legalllm_user} -d ${DB_NAME:-legalllm}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for Session Management and Caching
  redis:
    image: redis:7-alpine
    container_name: legalllm-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./docker-deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - legalllm-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LegalLLM Professional Application
  legalllm-app:
    build:
      context: .
      dockerfile: docker-deployment/Dockerfile
    container_name: legalllm-app
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${DB_USER:-legalllm_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-legalllm}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-legalllm}
      DB_USER: ${DB_USER:-legalllm_user}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Application Configuration
      APP_NAME: ${FIRM_NAME:-Legal AI Hub}
      FIRM_NAME: ${FIRM_NAME:-Your Law Firm}
      FIRM_JURISDICTION: ${FIRM_JURISDICTION:-australia}
      USE_DATABASE: true
      DEBUG: ${DEBUG:-false}
      
      # AI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      DEFAULT_MODEL: ${DEFAULT_MODEL:-gpt-4}
      TEMPERATURE: ${TEMPERATURE:-0.1}
      MAX_TOKENS: ${MAX_TOKENS:-4000}
      
      # Security Configuration
      SESSION_TIMEOUT_HOURS: ${SESSION_TIMEOUT_HOURS:-8}
      MAX_FAILED_ATTEMPTS: ${MAX_FAILED_ATTEMPTS:-5}
      LOCKOUT_DURATION_MINUTES: ${LOCKOUT_DURATION_MINUTES:-30}
      
      # File Upload Configuration
      MAX_FILE_SIZE_MB: ${MAX_FILE_SIZE_MB:-50}
      UPLOAD_DIR: /app/uploads
      
      # Streamlit Configuration
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_SERVER_ENABLE_CORS: false
      STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION: false
      
    volumes:
      - app_uploads:/app/uploads
      - app_data:/app/data
      - ./docker-deployment/app/logs:/app/logs
    ports:
      - "8501:8501"
    networks:
      - legalllm-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: legalllm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker-deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker-deployment/nginx/conf.d:/etc/nginx/conf.d
      - ./docker-deployment/ssl/certs:/etc/nginx/ssl/certs
      - ./docker-deployment/ssl/private:/etc/nginx/ssl/private
      - nginx_logs:/var/log/nginx
    networks:
      - legalllm-network
    depends_on:
      - legalllm-app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Automated Backup Service
  backup:
    image: postgres:15-alpine
    container_name: legalllm-backup
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${DB_NAME:-legalllm}
      POSTGRES_USER: ${DB_USER:-legalllm_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./docker-deployment/postgres/backups:/backups
      - ./docker-deployment/backup/scripts:/scripts
    command: /scripts/backup-cron.sh
    networks:
      - legalllm-network
    depends_on:
      postgres:
        condition: service_healthy

  # Monitoring and Health Check Service
  monitor:
    image: alpine:latest
    container_name: legalllm-monitor
    restart: unless-stopped
    environment:
      FIRM_NAME: ${FIRM_NAME:-Your Law Firm}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    volumes:
      - ./docker-deployment/monitor/scripts:/scripts
      - ./docker-deployment/monitor/logs:/logs
    command: /scripts/monitor.sh
    networks:
      - legalllm-network
    depends_on:
      - legalllm-app
      - postgres
      - redis

networks:
  legalllm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_data:
    driver: local
  nginx_logs:
    driver: local