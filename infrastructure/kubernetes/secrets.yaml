apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: legalai-hub
  labels:
    app: postgresql
    component: database
type: Opaque
data:
  # Base64 encoded values - REPLACE WITH ACTUAL VALUES IN PRODUCTION
  # Use: echo -n "your-password" | base64
  username: bGVnYWxhaV91c2Vy  # legalai_user
  password: cGFzc3dvcmRfY2hhbmdlX21l  # password_change_me
  replication-password: cmVwbGljYXRpb25fcGFzc3dvcmQ=  # replication_password
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: legalai-hub
  labels:
    app: redis
    component: cache
type: Opaque
data:
  # Base64 encoded Redis password
  password: cmVkaXNfcGFzc3dvcmRfY2hhbmdlX21l  # redis_password_change_me
---
apiVersion: v1
kind: Secret
metadata:
  name: legalai-secrets
  namespace: legalai-hub
  labels:
    app: legalai-app
    component: application
type: Opaque
data:
  # Base64 encoded API keys and database URL
  # IMPORTANT: Replace these with actual production values
  openai-api-key: eW91cl9vcGVuYWlfYXBpX2tleV9oZXJl  # your_openai_api_key_here
  groq-api-key: eW91cl9ncm9xX2FwaV9rZXlfaGVyZQ==  # your_groq_api_key_here
  database-url: cG9zdGdyZXNxbDovL2xlZ2FsYWlfdXNlcjpwYXNzd29yZF9jaGFuZ2VfbWVAcG9zdGdyZXNxbC1wcmltYXJ5LXN2Yzo1NDMyL2xlZ2FsYWk=  # postgresql://legalai_user:password_change_me@postgresql-primary-svc:5432/legalai
  jwt-secret: and1X3NlY3JldF9jaGFuZ2VfbWVfZm9yX3Byb2R1Y3Rpb24=  # jwt_secret_change_me_for_production
  encryption-key: ZW5jcnlwdGlvbl9rZXlfY2hhbmdlX21lX2Zvcl9wcm9kdWN0aW9u  # encryption_key_change_me_for_production
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: legalai-hub
  labels:
    app: grafana
    component: monitoring
type: Opaque
data:
  # Base64 encoded Grafana admin password
  admin-password: Z3JhZmFuYV9hZG1pbl9wYXNzd29yZA==  # grafana_admin_password
---
apiVersion: v1
kind: Secret
metadata:
  name: backup-secrets
  namespace: legalai-hub
  labels:
    app: pgbackrest
    component: backup
type: Opaque
data:
  # Base64 encoded backup configuration
  aws-access-key: eW91cl9hd3NfYWNjZXNzX2tleQ==  # your_aws_access_key
  aws-secret-key: eW91cl9hd3Nfc2VjcmV0X2tleQ==  # your_aws_secret_key
  aws-access-key-dr: eW91cl9hd3NfYWNjZXNzX2tleV9kcg==  # your_aws_access_key_dr
  aws-secret-key-dr: eW91cl9hd3Nfc2VjcmV0X2tleV9kcg==  # your_aws_secret_key_dr
  backup-encryption-passphrase: YmFja3VwX2VuY3J5cHRpb25fcGFzc3BocmFzZV9jaGFuZ2VfbWU=  # backup_encryption_passphrase_change_me
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: legalai-hub
  labels:
    app: postgresql
    component: database
data:
  postgresql.conf: |
    # PostgreSQL Configuration for LegalAI Hub
    # Australian legal compliance and high availability
    
    # --- CONNECTION AND AUTHENTICATION ---
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    superuser_reserved_connections = 3
    
    # --- MEMORY SETTINGS ---
    shared_buffers = 2GB                    # 25% of RAM
    effective_cache_size = 6GB              # 75% of RAM
    work_mem = 64MB
    maintenance_work_mem = 512MB
    
    # --- WRITE AHEAD LOG (WAL) FOR REPLICATION ---
    wal_level = replica
    max_wal_senders = 10
    max_replication_slots = 10
    synchronous_commit = on
    archive_mode = on
    archive_command = 'pgbackrest --stanza=legalai-primary archive-push %p'
    archive_timeout = 300                   # 5 minutes for RPO compliance
    
    # --- REPLICATION ---
    hot_standby = on
    max_standby_streaming_delay = 30s
    max_standby_archive_delay = 30s
    
    # --- BACKGROUND WRITER ---
    bgwriter_delay = 200ms
    bgwriter_lru_maxpages = 100
    bgwriter_lru_multiplier = 2.0
    
    # --- CHECKPOINTING ---
    checkpoint_completion_target = 0.7
    checkpoint_timeout = 5min
    max_wal_size = 4GB
    min_wal_size = 1GB
    
    # --- QUERY TUNING ---
    random_page_cost = 1.1                  # SSD storage
    effective_io_concurrency = 200          # SSD storage
    
    # --- LOGGING FOR AUSTRALIAN LEGAL COMPLIANCE ---
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_file_mode = 0600
    log_truncate_on_rotation = on
    log_rotation_age = 1d
    log_rotation_size = 100MB
    
    # --- AUDIT LOGGING FOR ISO 27001 COMPLIANCE ---
    log_connections = on
    log_disconnections = on
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_statement = 'mod'                   # Log all modifications
    log_min_duration_statement = 1000       # Log slow queries (1 second)
    
    # --- SECURITY ---
    ssl = on
    ssl_cert_file = '/etc/ssl/certs/server.crt'
    ssl_key_file = '/etc/ssl/private/server.key'
    ssl_ca_file = '/etc/ssl/certs/ca.crt'
    
    # --- STATISTICS ---
    track_activities = on
    track_counts = on
    track_io_timing = on
    track_functions = all
    
    # --- AUTOVACUUM FOR PERFORMANCE ---
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 1min
    autovacuum_vacuum_threshold = 50
    autovacuum_analyze_threshold = 50
    
    # --- LEGAL COMPLIANCE SETTINGS ---
    # Enable row-level security for multi-tenant isolation
    row_security = on
    
    # Time zone for Australian operations
    timezone = 'Australia/Sydney'
    
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    
    # Local connections
    local   all             postgres                                peer
    local   all             all                                     md5
    
    # IPv4 local connections
    host    all             all             127.0.0.1/32            md5
    
    # Kubernetes cluster connections
    host    all             all             10.0.0.0/8              md5
    
    # Replication connections
    host    replication     replicator      10.0.0.0/8              md5
    
    # Application connections
    host    legalai         legalai_user    10.0.0.0/8              md5
    
    # Monitoring connections
    host    all             postgres        10.0.0.0/8              md5
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgbackrest-config
  namespace: legalai-hub
  labels:
    app: pgbackrest
    component: backup
data:
  pgbackrest.conf: |
    # pgBackRest Configuration for LegalAI Hub
    # Meets Requirements: RTO <4 hours, RPO <5 minutes
    
    [global]
    # Repository Configuration - Primary Backup Storage
    repo1-type=s3
    repo1-s3-bucket=legalai-backups-primary
    repo1-s3-endpoint=s3.ap-southeast-2.amazonaws.com
    repo1-s3-region=ap-southeast-2
    repo1-retention-full=7
    repo1-retention-diff=4
    repo1-retention-archive=7
    
    # Repository Configuration - Secondary Backup Storage (DR Site)
    repo2-type=s3
    repo2-s3-bucket=legalai-backups-dr
    repo2-s3-endpoint=s3.ap-southeast-1.amazonaws.com
    repo2-s3-region=ap-southeast-1
    repo2-retention-full=14
    repo2-retention-diff=7
    repo2-retention-archive=14
    
    # Compression and Encryption
    compress-type=lz4
    compress-level=3
    cipher-type=aes-256-cbc
    
    # Performance Tuning
    process-max=4
    archive-async=y
    archive-timeout=60
    
    # Logging and Monitoring
    log-level-console=warn
    log-level-file=info
    log-path=/var/log/pgbackrest
    log-timestamp=y
    
    # Buffer Settings
    buffer-size=32MB
    io-timeout=300
    
    [legalai-primary]
    # Primary Database Configuration
    pg1-host=postgresql-primary-svc.legalai-hub.svc.cluster.local
    pg1-host-user=postgres
    pg1-path=/var/lib/postgresql/data/pgdata
    pg1-port=5432
    
    # Archive Command Integration
    archive-push-queue-max=1GB
    archive-check=y