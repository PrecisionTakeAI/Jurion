name: LegalAI Hub CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Code Quality and Security Checks
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort bandit safety mypy
    
    - name: Code formatting check (Black)
      run: black --check --diff .
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff .
    
    - name: Linting (flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Type checking (mypy)
      run: mypy core/ components/ --ignore-missing-imports
    
    - name: Security check (Bandit)
      run: bandit -r . -f json -o bandit-report.json || true
    
    - name: Dependency vulnerability check
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: legalai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
    
    - name: Set up test environment
      run: |
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/legalai_test
        export REDIS_URL=redis://localhost:6379/0
        export TESTING=true
        export DEBUG=false
    
    - name: Initialize test database
      run: |
        python -c "
        from database.models import Base
        from sqlalchemy import create_engine
        engine = create_engine('postgresql://postgres:postgres@localhost:5432/legalai_test')
        Base.metadata.create_all(engine)
        print('Test database initialized')
        "
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --cov=core \
          --cov=components \
          --cov=database \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=pytest-results.xml \
          -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/legalai_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          pytest-results.xml
          htmlcov/
          coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: legalai_integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr poppler-utils
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          --junitxml=integration-results.xml \
          -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/legalai_integration_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY_TEST }}
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: integration-results.xml

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: legalai_e2e_test
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr poppler-utils chromium-browser
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest selenium streamlit-testing
    
    - name: Start application
      run: |
        streamlit run web_interface/enhanced_app_authenticated.py --server.port 8501 &
        sleep 30  # Wait for app to start
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/legalai_e2e_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    - name: Run E2E tests
      run: |
        pytest tests/e2e/ \
          --junitxml=e2e-results.xml \
          -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/legalai_e2e_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: e2e-results.xml

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: e2e-tests
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: legalai_perf_test
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust pandas matplotlib seaborn
    
    - name: Start application for load testing
      run: |
        streamlit run web_interface/enhanced_app_authenticated.py --server.port 8501 &
        sleep 30
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/legalai_perf_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
    
    - name: Run load tests
      run: |
        python tests/load_testing/run_load_tests.py \
          --host http://localhost:8501 \
          --scenario target
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: tests/load_testing/results/

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Test Docker Image
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build & Test
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: legalai-hub:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm \
          -e DATABASE_URL=sqlite:///tmp/test.db \
          -e TESTING=true \
          legalai-hub:${{ github.sha }} \
          python -c "import sys; print('Docker image test passed')"

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [docker-build, performance-tests]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.legalai-hub.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Railway (Staging)
      run: |
        echo "Deploying to staging environment..."
        # Railway deployment commands would go here
        # railway deploy --environment staging
    
    - name: Run smoke tests on staging
      run: |
        # Basic smoke tests on staging environment
        curl -f https://staging.legalai-hub.com/health || exit 1
        echo "Staging deployment successful"

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [docker-build, performance-tests]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://legalai-hub.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Railway (Production)
      run: |
        echo "Deploying to production environment..."
        # Railway deployment commands would go here
        # railway deploy --environment production
    
    - name: Run smoke tests on production
      run: |
        # Basic smoke tests on production environment
        curl -f https://legalai-hub.com/health || exit 1
        echo "Production deployment successful"
    
    - name: Notify deployment success
      run: |
        echo "✅ Production deployment completed successfully"
        # Add notification logic (Slack, email, etc.)

  # Test Results Summary
  test-summary:
    runs-on: ubuntu-latest
    name: Test Results Summary
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate test summary
      run: |
        echo "# LegalAI Hub Test Results Summary" > test-summary.md
        echo "Date: $(date)" >> test-summary.md
        echo "Commit: ${{ github.sha }}" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "## Test Status" >> test-summary.md
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
        echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
        
        echo "" >> test-summary.md
        echo "## Coverage Report" >> test-summary.md
        if [ -f unit-test-results/coverage.xml ]; then
          echo "Coverage report available in artifacts" >> test-summary.md
        fi
        
        cat test-summary.md
    
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup
    needs: [test-summary]
    if: always()
    
    steps:
    - name: Clean up old artifacts
      run: |
        echo "Cleaning up old artifacts and temporary resources..."
        # Cleanup logic would go here